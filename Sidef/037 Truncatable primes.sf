#!/usr/bin/ruby

# Daniel "Trizen" È˜uteu
# Edit: 04 February 2019
# https://github.com/trizen

# Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

# https://projecteuler.net/problem=37

# Runtime: 0.265s

func digits2num(digits, base) {
    digits.map_kv {|k,v| base**k * v  }.sum
}

func is_left_truncatable_prime(digits, base) {

    for k in (^digits) {
        is_prime(digits2num([digits[0..k]], base)) || return false
    }

    return true
}

func generate_from_prefix(p, base) {

    var seq = [p]

    for n in (1 ..^ base) {
        var t = [n, p...]
        if (is_prime(digits2num(t, base))) {
            seq << __FUNC__(t, base).grep { is_left_truncatable_prime(_, base) }...
        }
    }

    return seq
}

func both_truncatable_primes(base) {     # finite sequence for each base

    var prime_digits = (base-1 -> primes)   # prime digits < base

    prime_digits.map  {|p| generate_from_prefix([p], base)... }\
                .map  {|t| digits2num(t, base) }\
                .sort
}

var T = both_truncatable_primes(10)
say T.grep{.len > 1}.sum
