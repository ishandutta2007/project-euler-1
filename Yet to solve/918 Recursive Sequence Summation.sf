#!/usr/bin/ruby

# Recursive Sequence Summation
# https://projecteuler.net/problem=918

func a(n) is cached {
    return 1 if (n == 1)

    #~ if (n.is_even) {
      #~ #  return (2**n.valuation(2) * a(n.remdiv(2)))
        #~ return 2**n.as_bin.count('0')
    #~ }

    #return 2**((n-1).popcount)
    #~ return (2**n.as_bin.count('0') - 3*a((n-1)/2 + 1))

    #return (2**((n - 1 / 2).as_bin.count('0')) - (3 * (2**((n-1 / 2 + 1).as_bin.count('1')))))

    if (n.is_even) {
        return (2**n.valuation(2) * a(n.remdiv(2)))
    }

    #var res = (a((n-1)/2))     # == 2**n.as_bin.count('0')
    #var res = (a((n-1)/2 + 1))     # == 2**popcount(n+1)
    #var res = (a((n-1)/2) + a((n-1)/2 + 1))     # == the positive integers

    var res = (a((n-1)/2) - 3*a((n-1)/2 + 1))
    return res
}

say a(100)
say a(1000)
say a(10000)
say a(10**12)

say a.map(1..100)
say a.map(1..100).acc
say a.map(1..100).sum

assert_eq(a(10**12), 13998066704666624)
assert_eq( a.map(1..100).sum, 290)

#~ for n in (1..1000) {
    #~ say a(n)
#~ }
